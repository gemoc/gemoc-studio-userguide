[[gemoc-language-workbench]]
= GEMOC Language Workbench image:images/icons/IconeGemocLanguage_16.png[width=16, height=16, role=right]

== Overview

The *((GEMOC Language Workbench))* is intended to be used by the ((Language Designer))s and the ((Language Integrator))s. It provides the tools to create and compose eXecutable Domain-Specific Modeling Languages (xDSMLs) using the GEMOC approach.


[[figure-glw-screenshot-of-language_workbench]]
.Screenshot of the GEMOC Language Workbench showing the design of a Timed Finite State Machine (TFSM) example.
image::images/gemoc_language_workbench_TFSM_screenshot.png[Screenshot of the GEMOC Language Workbench, 800]
(((TFSM,Language Workbench)))

'''

include::GuideLW_XDSMLProject_Section.asciidoc[]

include::GuideLW_Dashboard_Section.asciidoc[]


////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
[[create-language-chapter]]
== Create a language
include::GuideLW_DomainModelProject_Section.asciidoc[]


// === Defining Domain-Specific Constraints
// TODO

[[defining-a-concrete-syntax-section]]
=== Defining a Concrete Syntax
An xDSML can support different concrete syntaxes. Most EMF-based editors should work with GEMOC, however the GEMOC Studio provides additional support for some specific editors. Thus, we recommend using: an EMF arborescent editor, an Xtext editor, and/or a Sirius editor.
Don't forget to link the xDSML Project to the concrete syntax project(s) you want to use by editing the _project.xdsml_ file.


[[defining-a-concrete-syntax-with-xtext-section]]
==== Defining a Concrete Syntax with Xtext
See http://www.eclipse.org/Xtext/[the Xtext website].


[[defining-a-concrete-syntax-with-sirius-section]]
==== Defining a Concrete Syntax with ((Sirius))
If you want to create a graphical concrete syntax you can use Sirius. The http://www.eclipse.org/sirius/doc/[Sirius documentation] provides information for http://www.eclipse.org/sirius/doc/specifier/Sirius%20Specifier%20Manual.html[Sirius Specifier Manual].

[[make-language-executable-chapter]]
== Make a language executable

The GEMOC Studio currently supports two major ways to make a language executable :

* one will target a sequential engine 
* the second will target a concurrent engine

[NOTE]
====
The underlying executionframework used by the GEMOC Studio can be extended to support other methodologies or engines. 
However, this isn't the scope of this document to explain how to use this framework and build an alternate or dedicated engine.
==== 

[[make-sequential-language-executable-section]]
=== Make a sequential executable language

include::GuideLW_Seq_DomainSpecificActionsProject_Section.asciidoc[]

[[make-concurrent-language-executable-section]]
=== Make a concurrent executable language

include::GuideLW_DomainSpecificActionsProject_Section.asciidoc[]

include::GuideLW_ECLMoCCML_Section.asciidoc[]

include::GuideLW_DomainSpecificEvents_Section.asciidoc[]

include::GuideLW_DefiningFeedbackSpecification_Section.asciidoc[]

include::GuideLW_ECLMoCCML_Section.asciidoc[]

[[define-animator-chapter]]
== Define an animator

include::GuideLW_DefiningDebug_Section.asciidoc[]

include::GuideLW_DefiningMultidimensionalTrace_Section.asciidoc[]

[[compose-languages-chapter]]
== Compose languages

include::GuideLW_ComposingLanguages_Section.asciidoc[]
