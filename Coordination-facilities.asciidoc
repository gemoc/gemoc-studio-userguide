[[composing-languages-with-bcool-section]]
=== Coordination of Languages with BCOoL
==== What is ((BCOoL))?
((BCOoL)) is a dedicated language to explicitly specify how models conforming to different DSMLs can be coordinated. This enables the integrator to capture the knowledge of integration of systems by a dedicated language. In BCOoL, the specification relies on _Operators_. Once defined, the specification can be used to generate a model of coordination when models are know.

image::http://timesquare.inria.fr/BCOoL/images/bcoolapr.jpg[Overview of the BCOoL approach]

((BCOoL)) is developed on top of the eclipse platform as a set of plugins. More precisely, it is integrated to the GEMOC studio. The GEMOC studio is the integration of various Eclipse Modeling Framework (EMF) based technologies adequate for the specification of executable domain specific modeling languages. BCOoL is itself based on the EMF and its abstract syntax has been developed using Ecore (i.e., the meta-language associated with EMF). The textual concrete syntax has been developed using Xtext, providing advanced editing facilities. 

BCOoL takes advantages of this collaborative environment by adding coordination facilities. In the language workbench, an _integrator_ can develop BCOoL operators to specify coordination patterns between languages, and then a _system_ designer can use these operators in the modeling workbench to coordinate models.


=== Running Example: Coordination of a Coffee Machine Model
To present BCOoL, we develop a simple operator between the TFSM and Activity language. The operator coordinates FSMEvents from the TFSM and Actions from the Activity language by comparing theirs names. 

image::http://timesquare.inria.fr/BCOoL/images/coffeemachine.png[The Heterogeneous Model of a Coffee Machine ] 
The picture illustrates the heterogeneous model of a coffee machine. To coordinate the models, we have to synchronize the activity CoffeeAlgorithm and the TFSM CoffeeCoin by coordinating the corresponding Actions and FSMEvent. In the following, we use the GEMOC studio to develop and then apply these operators. To express such a coordination, we develop an operator in BCOoL. 

