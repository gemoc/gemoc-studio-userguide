
//== The SigPML DSML example 

== SigPML overview

// This tutorial is avialable in video

The SigPML is a Domain Specific Modeling Language dedicated to data flow processing to create processing flows. 
The concrete syntax is based on blocks, ports and connectors which associated ports to create a directed flow. 
The execution semantics of the DSML must defined that all the blocks of a model run concurrently. 
Each block executes a local processing after a read operation on the input port. 
A write operation of the blocks on connectors through an output port is done after the local execution. 
The input and output ports own an admitted rate of data to transmit through the connectors. 
The connectors have a defined maximum date number. 
The input and output rates must respect the maximum data number.

// inclure un le resultat final avec un snapshot.

== Import and install the projects for the abstract and concrete syntax


=== SigPML abstract syntax

This language is based on the metamodel presented in the next figure.

image:images/quickTutorial/sigpmldomainEcore.png[SigPML metamodel]

A SigPML Application is a set of Blocks and a set of Connectors 

=== SigPML concrete syntax and sample model

The graphical concrete syntax is defined with the Sirius component. We provide a Sirius project as a zip file. 
You can also make your own Sirius project and use the online https://wiki.eclipse.org/Sirius/Tutorials/4MinTutorial#Overview[Sirius tutorial] and the online http://www.eclipse.org/sirius/doc/[Sirius Documentation].

With the provided project, the final result of the modeling tool is showed in the next figure.

//image:sigpmlModelingEditor.png[SigPML modeling tool]


== Creating an xDSML Project

First, start by creating a new xDSML project (__New > Project > GEMOC
Project / new xDSML Project__), with your desired name (for instance
"com.example.automata").  In the created project, we can open the
project.xdsml file. The xDSML view summarizes all the important
resources used in an xDSML project (which are part of and managed by
other projects).  This view is a kind of dashboard or control center to
have quick access to any important resource of the project.

=== Open xDSML view

Description of the xDSML view with a snapshot


=== Select the domain model

=== Select the graphical editor



== SigPML execution semantics

=== Execution semantics overview

The execution semantics of the DSML must defined that all the blocks of a model run concurrently. 
Each block executes a local processing after a read operation on the input port. 
A write operation of the blocks on connectors through an output port is done after the local execution. 
The input and output ports own an admitted rate of data to transmit through the connectors. 
The connectors have a defined maximum date number. 
The input and output rates must respect the maximum data number.

So we must define:

// phrases structurées pour préparer la suite 1) DSA 2) MoCC 3) DSE


=== DSA definition

ED et EF general overview and the definition related to SigPML (ED = Rate ; EF = read and write)

==== Creating the DSA project


==== Implementation of the DSA

[source]
----
the source code with an include or not.
//include::sigpmlTuto.xtend[]
----


=== DSE definition

WARNING: The two next sections DES definition and MoCC definition are tighly coupled. So you can create the two projects and iterate between the two projects in progress.


// ECL definition due to tthe presence of this name in the xDSML view

==== Creating the ECL project


==== Implementation of the ECL

// bien separer les ED, les defs de MoCC event sur EF
// def des Inv par classe avec l'appel aux library de MoCC

[source]
----
the source code with an include or not.
//include::sigpmlTuto.ecl[]
----


=== MoCCML definition

==== Creating the MoCCML project



==== Implementation of the MoCCML


=== Create an animator

==== Creating the Animator project as a Sirius viewpoint

// fournir le aird à télécharger pour aller plus vite et plus simple dans le tuto. mais pas le projet pour obliger à la créer



== SigPML modeling workbench

=== Launch the Modeling workbench creation (Start a new Eclipse)

=== Import the project with a sample model

=== Create a launch configuration

=== Start the model

=== Select a logical step

== Remarks



