[[gemoc-language-workbench]]
== GEMOC Language Workbench image:images/icons/IconeGemocLanguage_16.png[width=16, height=16, role=right]

=== Overview

The *((GEMOC Language Workbench))* is intended to be used by the ((Language Designer))s and the ((Language Integrator))s. It provides the tools to create and compose eXecutable Domain-Specific Modeling Languages (xDSMLs) using the GEMOC approach.

// Added from TutorialMain by XC

The Gemoc approach aims to add execution semantics on an existing DSML
definition.  It consists in extending the abstract syntax (metamodel) of a DSML
with several concerns:

* the **DSA** --Domain Specific Actions-- defines the data dedicated to the
  runtime updates (Execution Data -- ED) and the functions to handle these
  datas (Execution Functions -- EF). DSA and DSML abstract syntax define the
  extended asbstract syntax. 

* the **MoCC** (Model of Concurrency and Communication) which includes the
  mapping definition on the extended abstract syntax and the schedule
  constraints of the semantics definition. 

* the **DSE** (Domain Specific Event): a two-way protocole between the DSA and
  the MoCC.

* the **animator** which provides views to control and monitor the execution of
  the models conforming to the xDSML.

The next figure gives an overview of the requested definitions to obtain an
xDSML.

// TODO: à garder mais à aligner sur celle de Benoit
//[[Focus-Tutorial]]

[[figure-gemoc-bigPicture]]
.Gemoc overview and tutorial focus.
image::images/gemoc_bigPicture.jpg[Gemoc overview, 800]
(((GEMOC Big Picture)))





[[figure-glw-screenshot-of-language_workbench]]
.Screenshot of the GEMOC Language Workbench showing the design of a Timed Finite State Machine (TFSM) example.
image::images/gemoc_language_workbench_TFSM_screenshot.png[Screenshot of the GEMOC Language Workbench, 800]
(((TFSM,Language Workbench)))

'''

include::GuideLanguageWorkbenchXDSMLProjectSection.asciidoc[]

include::GuideLanguageWorkbenchDomainModelProjectSection.asciidoc[]

include::GuideLanguageWorkbenchDomainSpecificActionsProjectSection.asciidoc[]


// === Defining Domain-Specific Constraints
// TODO

[[defining-a-concrete-syntax-section]]
=== Defining a Concrete Syntax
An xDSML can support different concrete syntaxes. Most EMF-based editors should work with GEMOC, however the GEMOC Studio provides additional support for some specific editors. Thus, we recommend using: an EMF arborescent editor, an Xtext editor, and/or a Sirius editor.
Don't forget to link the xDSML Project to the concrete syntax project(s) you want to use by editing the _project.xdsml_ file.


[[defining-a-concrete-syntax-with-xtext-section]]
==== Defining a Concrete Syntax with Xtext
See http://www.eclipse.org/Xtext/[the Xtext website].


[[defining-a-concrete-syntax-with-sirius-section]]
==== Defining a Concrete Syntax with ((Sirius))
If you want to create a graphical concrete syntax you can use Sirius. The http://www.eclipse.org/sirius/doc/[Sirius documentation] provides information for http://www.eclipse.org/sirius/doc/specifier/Sirius%20Specifier%20Manual.html[Sirius Specifier Manual].


include::GuideLanguageWorkbenchECLMoCCML.asciidoc[]

include::GuideLanguageWorkbenchDomainSpecificEventsSection.asciidoc[]

include::GuideLanguageWorkbenchDefiningFeedbackSpecificationSection.asciidoc[]

include::GuideLanguageWorkbenchDefiningDebugSection.asciidoc[]

include::GuideLanguageWorkbenchDashboardSection.asciidoc[]

