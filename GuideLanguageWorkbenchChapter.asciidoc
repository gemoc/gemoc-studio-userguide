== Gemoc Language workbench

=== Language Workbench overview

The GEMOC Language Workbench, intended to be used by ((language designer))s:  it allows building and composing new executable DSMLs.


[[figure-glw-screenshot-of-language_workbench]]
.Screenshot of GEMOC Studio Language Workbench on the TFSM (Timed Finite State Machine) example.
image::images/gemoc_language_workbench_TFSM_screenshot.png[Screenshot of GEMOC Studio Language Workbench on the TFSM (Timed Finite State Machine) example]
(((TFSM)))
(((TFSM,Language workbench)))

'''
[[section-gemoc-language-project]]
=== Gemoc Language project

In the menu go to: File> New> Projects...> Gemoc Language project

This project will be the aggregator of the other Eclipse projects that will constitute the components of a Language Unit of the xDSML.

It mainly defines a project.xdsml file that references these other components.

The xDSML file isn't supposed to be edited manually. The pop up menu on the project (available on right click) or the <<section-process-support-view>> provides a set of wizard to fill this file.   


From these information, the project will generate additional code that will be used by the execution engine when the language will be deployed and used by the <<chapter-gemoc-modeling-workbench>>.   

[[section-define-AS-project]]
=== Defining Abstract Syntax (or domain concepts)

Defining the abstract syntax (AS) in the Language Workbench is done thanks to an EMF Ecore project that will be associated to the xDSML definition.

All ecore editors can be used to edit the concepts in the ecore file.

The EMF project can be created manually and then associated to the xDSML or directly created for the specific use of a given xDSML.

[[section-define-AS-project-method-1]]
==== Method 1 : Creation via xDSML popup

To create the EMF project:

* right click on the xDSML project
* navigate in the _Gemoc Language_ entry.
* click on _create Domain Model project_

This will open a wizard asking either to create a new EMF project or select an existing one (usefull for <<section-define-AS-project-method-2, method 2>>).
Creating a new EMF project will ask for some 

[NOTE]
In future version of the studio, this method may disapear and be replaced by <<section-define-AS-project-method-3, method 3>>.

[[section-define-AS-project-method-2]]
==== Method 2 : Manual creation and association to the xDSML

From eclipse menu:

* _File > New > Projects... > Ecore Modeling Project_
* in the Ecore diagram, define the concepts for your language as a class diagram.

[TIP]
There are several other ways to create valid EMF projects. Amung them we can consider: _File > New > Projects... > EMF Project_, _File > New > Projects... > Empty EMF Project_,  _File > New > Projects... > xText Project_ ... However, this isn't in the scope of this document to detail them or explain how to correctly configure them for being used by Gemoc.

Then associate the EMF project to the xDSML. The association is done either with right click on the xDSML project, _Gemoc Language_ > _create Domain Model project_ > _Select existing EMF project_; or via the Gemo Guideline view.


[[section-define-AS-project-method-3]]
==== Method 3 : Creation or selection via Gemoc Guideline view

The Gemoc Guideline view offers an integrated vision of the most important steps of the xDSML creation process. When selecting the _Define Domain Model_ task, a button allows to launch the wizards of <<section-define-AS-project-method-1, method 1>>.

TODO new project wizard (via popup, via process)
TODO select existing project
TODO Ecore editor



===  Defining RunTime Data

=== Defining Domain-Specific Actions (DSAs)

In Gemoc, the DSAs are developped using Kermeta 3.

[NOTE]
There may exist other ways to create DSAs, but these methods aren't in the scope of this document.

* right click on the xDSML project
* navigate in the _Gemoc Language_ entry.
* click on _create DSA project_

In the wizard you can select an existing templates to help create the aspects classes that will extend the classes of the Domain model.


You can manually create a Kermeta 3 project in the main eclipse menu, and then associate it to an xDSML project.



=== Defining Domain-Specific Constraints

=== Defining a concrete syntax
The xDSML can support different concrete syntaxes. Most EMF based editors should work however Gemoc provides additional support for some editors.
Editors explictly supported are: EMF tree editor, xText editor, Sirius editor.

==== Defining a concrete syntax with xText

==== Defining a concrete syntax with ((Sirius))
If you want to create a graphical concrete syntax you can use Sirius. The http://www.eclipse.org/sirius/doc/[Sirius documentation] provides information for http://www.eclipse.org/sirius/doc/specifier/Sirius%20Specifier%20Manual.html[Sirius Specifier Manual].

=== Defining a Model of Concurrency (MoC)

=== Defining Domain Specific Events (DSE)
nimporte quoi conflit
=== Defining an animation view
The animation layer is an extension on top of a graphical editor defined with ((Sirius)).

TODO Debug layer, Animation layer

[[section-process-support-view]]
=== Process support view

TODO present process view
