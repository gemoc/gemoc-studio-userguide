== GEMOC Language Workbench image:images/icons/IconeGemocLanguage_16.png[width=16, height=16, role=right]

=== Overview

The *((GEMOC Language Workbench))* is intended to be used by the ((Language Designer))s. It provides the tools to create and composte Executable Domain-Specific Modeling Languages (xDSMLs).

[[figure-glw-screenshot-of-language_workbench]]
.Screenshot of the GEMOC Language Workbench showing the design of a Timed Finite State Machine (TFSM) example.
image::images/gemoc_language_workbench_TFSM_screenshot.png[Screenshot of the GEMOC Language Workbench]
(((TFSM,Language Workbench)))

'''
[[section-gemoc-language-project]]
=== xDSML Project

==== Purpose
The xDSML Project is the core project of languages created using the GEMOC Studio. It has two main purposes:
* Referencing the different projects representing the various parts constituting an xDSML;
* Guiding the ((Language Designer)) in the language creation process through the ((GEMOC Dashboard)) illustrating the workflow of creating an xDSML using the GEMOC Studio.

==== Creating the xDSML Project
In the GEMOC Studio, go to: _File > New > Project... > New GEMOC Language Project_. This will create a new xDSML Project in your workspace.

==== Editing the xDSML Project
The main file constituting the xDSML Project is the _project.xdsml_. To edit this file, open it with the "XDSML Model Editor".

From the information specified in this file, the project generates additional code that is used by the Execution Engine during the execution of models conforming to the xDSML (see <<chapter-gemoc-modeling-workbench>>).   

[[section-define-AS-project]]
=== Domain Model Project

==== Purpose
The Domain Model Project specifies the concepts of the domain at hand and the structural relations between the concepts.

==== Creating the Domain Model Project
The GEMOC Studio relies on the Eclipse Modeling Framework for its Domain Model Projects. See http://eclipse.org/modeling/emf/[the EMF website] for more information on how to create an EMF project in Eclipse.

When your EMF Project is done, connect your xDSML Project to it by specifying in the _project.xdsml_ file the name of the EMF Project, the path to the genmodel of your Ecore metamodel and the name of the root element as _package::root_.

==== Editing the Domain Model Project
If you wish to modify your Domain Model, do not forget to reload the associated genmodel and regenerate the EMF model code (and edit/editor code if you use them).

[[section-define-dsa-project]]
=== Defining the Domain-Specific Actions (DSA) Project

==== Purpose
The Domain-Specific Actions define the runtime state (*Execution Data*) of the model and the operations (*Execution Functions*) which modify the runtime state of the model.

==== Creating the DSA Project
In the GEMOC Studio, the DSA are implemented using https://github.com/diverse-project/k3/wiki[Kermeta 3].
To create a new DSA Project, in the main menu of the GEMOC Studio, go to: _File > New > Project... > K3 Project_. In the wizard, create it as a Plug-in with EMF using the template of your choice.
Then, connect the xDSML Project to the DSA Project by referencing the DSA Project in the _project.xdsml_ file.

==== Editing the DSA Project
Kermeta 3 is based on http://www.eclipse.org/xtend/index.html[xTend]. The Execution Data and Execution Functions are defined through aspects weaved onto the metaclasses of the Domain Model.

===== Defining the Execution Data
The Execution Data consist in attributes and references added to existing concepts (metaclasses) of the Abstract Syntax. They may also include new metaclasses which define the type of these new attributes and references.

===== Defining the Execution Functions
The Execution Functions define how the Execution Data evolve during the execution of the model. Execution Functions can be implemented by defining the body of a method.

[NOTE]
For now, Execution Functions are considered as *atomic, instantaneous and blocking*. This means that any long computation will block the rest of the simulation, and concurrent Execution Functions are not executed in concurrence yet.

[NOTE]
For technical reasons, the Domain Model (Ecore metamodel) must specify the signature of the Execution Functions as EOperations.


=== Defining Domain-Specific Constraints
TODO

=== Defining a Concrete Syntax
An xDSML can support different concrete syntaxes. Most EMF-based editors should work, however GEMOC provides additional support for some editors.
Editors explictly supported are: EMF tree editor, Xtext editor, Sirius editor.

==== Defining a Concrete Syntax with Xtext
See http://www.eclipse.org/Xtext/[the Xtext website].

==== Defining a Concrete Syntax with ((Sirius))
If you want to create a graphical concrete syntax you can use Sirius. The http://www.eclipse.org/sirius/doc/[Sirius documentation] provides information for http://www.eclipse.org/sirius/doc/specifier/Sirius%20Specifier%20Manual.html[Sirius Specifier Manual].

=== Defining a Model of Concurrency and Communication (MoCC)
TODO MoCCML + ECL

=== Defining the Domain-Specific Events (DSE)
The DSE can be defined using the *Gemoc Events Language* (GEL). Create a new file with extension ".GEL" in your DSE project.
The DSE define a mapping between MoccEvents from the MoCC and the Execution Functions (defined as methods in the DSA)



Therefore, the first step to designing the DSE in GEL is importing the ECL file and the Ecore file of the xDSML. You can do using the "platform:/plugin" syntax.

DSEs can be defined between the "DSE" and "end" keywords.
After the 'upon' keyword, a MoccEvent from the ECL file can be referenced.
After the 'triggers' keyword, a navigation path from the context of the MoccEvent to an EOperation can be defined to specify which Execution Function is triggered by the Domain-Specific Event being defined.

A DSE (defined at the language level) results in corresponding Model-Specific Events (at the model-level) after a compilation phase. For every instance of the metaclass context of the MoccEvent referenced by the DSE, a corresponding Model-Specific Event is created. For instance if a DSE is created for Transitions and there are 3 Transitions in the model, there will be a corresponding Model-Specific Event for each Transition.

=== Defining the Feedback Policies
The Feedback Policies can be defined in GEL as well. A Feedback Policy is responsible for specifying the influence of a piece of data from the domain on the MoCC. A Feedback Policy can be defined as follows.
First, give a name to the result of the Execution Function using the "returning" keyword. Then, between the "Feedback" and "end" keywords, the Feedback Rules can be defined as "[filter] => allow consequence".

A Feedback Policy must be used when the MoCC needs runtime data from the domain without which it would otherwise realize an arbitrary decision. This is typically the case for any form of conditional-based control flow.


=== Defining an animation view
The animation layer is an extension on top of a graphical editor defined with ((Sirius)).

TODO Debug layer, Animation layer

[[section-process-support-view]]
=== Process support view

TODO present process view
