////
ifeval::[{docname}=='TutorialMain']
:toc:
:numbered:
:tabsize=4:
endif::[]
////


= GEMOC xDSML tutorial


// name="../../../..//home/svn/SVN/gemoc/trunk/deliverables/WP1/D1.2.1/icons/IconeGemocStudio_48x48x32"

WARNING: This part is a work in progress and is not yet finished.
It still contains TODO and must be polished.


== Introduction

The purpose of these tutorials is to explain on simple examples with
different features, how to define an eXecutable Domain Specific Modeling
Language (xDSML). Based on an existing DSML definition (abstract and concrete
syntaxes), we define a concurrent semantics.
// with its associated mapping on the abstract syntax.  

This part is structured as follows.  First, we give an overview of
xref:sec-GEMOC-approach[GEMOC approach] and then we list the main tutorials and
their objectives.  The starting point of the tutorials is generally the
abstract and concrete syntaxes of a DSML so that the focus is put on the
definition of the execution semantics using the Gemoc Studio.

////
to show the focus of our tutorials,
then we illustrate on two different DSMLs the creation of an xDMSL from a DSML
definition based on a Ecore metamodel. 

For each example, the starting point is the abstract and the concrete
syntaxes of the DSMLs.
The first step consists in defining the **extended metamodels** to add data and
functions relative to the execution features.
In the next step, we define the **concurrent semantics** of our DSMLs and map
this definition to the extended metamodel. At this step the xDSML is created
and can be deployed in a modeling workbench.
A first improvement of the **mapping definition** is also presented to enhance the capacity of the relation between the concurrent semantics and the extended metamodel.    
////



////
**Conventions used in this tutorial**

Normal text is used to explain the process and  give some rationals
and the proposed solutions.

// [icon="images/icons/IconeGemocStudio_48x48x32.png"]
// [NOTE]

==========================
This kind of paragraph corresponds to manipulation to be performed of the GEMOC
studio, either the Language Workbench or the Modeling Workbench.
==========================
////




[[sec-GEMOC-approach]]
== The GEMOC Approach for defining eXecutable DSML


//[[sec-GEMOC-architecture]]

////
NOTE: We consider that the Abstract Syntax (AS) of the DSML is already
defined and thus that its design is not part of the GEMOC xDSML process.
Nevertheless, the process could easily be extended with a new step
which consists in defining the AS and its Concrete Syntaxes (CS).
////

The Gemoc approach aims to add execution semantics on an existing DSML
definition.  It consists in extending the abstract syntax (metamodel) of a DSML
with several concerns:

* the **DSA** --Domain Specific Actions-- defines the data dedicated to the
  runtime updates (Execution Data -- ED) and the functions to handle these
  datas (Execution Functions -- EF). DSA and DSML abstract syntax define the
  extended asbstract syntax. 

* the **MoCC** (Model of Concurrency and Communication) which includes the
  mapping definition on the extended abstract syntax and the schedule
  constraints of the semantics definition. 

* the **DSE** (Domain Specific Event): a two-way protocole between the DSA and
  the MoCC.

* the **animator** which provides views to control and monitor the execution of
  the models conforming to the xDSML.

The next figure gives an overview of the requested definitions to obtain an
xDSML.

// TODO: à garder mais à aligner sur celle de Benoit
//[[Focus-Tutorial]]

.Gemoc overview and tutorial focus
image:images/quickTutorial/gemoc_bigPicture_tutorial_trimed.jpg[Gemoc overview and tutorial focus]


////

During the tutorial we describe these different definitions in a fixed order to illustrate the languages included in the Gemoc studio but all these definitions are all related to, so an iterative approach is often recommended.    

The described examples are based on the xref:sec-MarkedGraph[Marked Graph] DSML and a xref:sec-SigPML[SigPML] DSML.

////


////
== Dashboard of a GEMOC approach

//View of the xDSML
////

////

== Architecture of a GEMOC xDSML

//View of the xDSML
[[xDSML-View]]
.xDSML view of a Gemoc Language workbench 
image:images/quickTutorial/SigPMLxDSMLView.png[xDSML View, 800]

////


== Tutorials

- link:../../tutorial_markedgraph/html_single/GuideTutorialMarkedGraph.html[Marked Graph tutorial] (or link:../../tutorial_markedgraph/html/GuideTutorialMarkedGraph.html[chunked version]): quick example to
  demonstrate how to define an
  execution semantics and graphical animation for a highly concurrent language,
  Marked Graph.

- link:../../tutorial_sigpml/html_single/Tutorial_SigPML.html[SigPML tutorial] (or link:../../tutorial_sigpml/html_single/Tutorial_SigPML.html[chunked version])

- link:../../tutorial_automata/html_single/Tutorial_Automata.html[Automata tutorial] (or link:../../tutorial_automata/html_single/Tutorial_Automata.html[chunked version]): The used DSML is automata
  used to recognize words built on an alphabet.   Its focus is on a possible
  methodology to make a DSML executable.

