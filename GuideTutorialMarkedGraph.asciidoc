ifeval::[{docname}=='GuideTutoriaMarkedGraph']
:toc:
:toclevels: 4
:numbered:
:tabsize: 4
endif::[]



= Tutorial: Make Marked Graph models executable with the GEMOC Studio

// old title: Animate Marked Graph Models with the GEMOC Studio


== What is expected at the end of this tutorial

This tutorial aims at demonstrating the power of the GEMOC studio to
define an executable semantics and provide graphical animation for a
DSML.   It relies of the
http://en.wikipedia.org/wiki/Marked_graph[marked graph] language.

The folowing animation shows the expecting results of this tutorial:
according to the fired transitions, tokens move from place to place.

.Expected animation for Marked Graph models
image::images/MarkedGraph/MarkedGraph-wikipedia-anim-all.gif[Expected animation for Marked Graph models] 


////
NOTE: A screencast of this tutorial can be found here (give URL when
it will be available)...
////


////
Please, read the link:GuideQuickTutorial.html[introduction of tutorials] to
understand the GEMOC approach to define executable DSML or to have a
better understanding of the abbreviations used in this tutorial.
////


== Install the projects defining the Marked Graph AS and CS

// TODO: It is here that the description of the AS should be given.
// See sirius tutorial.

The domain model is implemented with several EMF projects that you
need to import into your workspace.
A graphical editor defined with Sirius is also available to visualize
and edit Marked Graph models.

////
TODO: If you are using the GEMOC Studio, you can find these projects
from the provided examples (menu File > New > Example... : select
Marked Graph DSML Definition). 
////

=== Import the Marked Graph AS and CS

Download the
link:MarkedGraph/MarkedGraph/MarkedGraph/org.gemoc.sample.markedgraph.zip[provided
archive] containing the projects and unzip it.  Then, with the GEMOC
Studio, select __import... / General / Existing Projects into
Workspace__ and import all the projects from the archive file.


=== Abstract Syntax

Marked Graph is a kind of
http://en.wikipedia.org/wiki/Petri_net[Petri net]
in which every place has exactly one incoming arc and exactly one
outgoing arc.  As a consequence, it a concurrent language (several
transitions may be fired) and has no conflict.

The Domain Model, also called Abstract Syntax or Metamodel, defines :

- A __marked graph__ as a set of __places__ and __transitions__.
- Each __Place__ has exactly one __input__ transition and one __output__
transition and a token count.
- A transition has several __input__ places and several __output__
  places.

// [[MarkedGraph-AS]]
.Abstract Syntax (Metamodel) of MarkedGraph
image::images/MarkedGraph/MarkedGraph-AS.png[MarkedGraph Domain Model (Metamodel)]

=== Concrete Syntax and Sample Model

The graphical concrete syntax draws places as
circles and transitions as squares.  Inputs and outputs of places and
transitions are designated by arrows.  The following picture shows the
graphical representation of the
link:http://en.wikipedia.org/wiki/Marked_graph[Marked Graph model of wikipedia].

// TODO: http://en.wikipedia.org/wiki/Marked_graph
Here the graphical syntax of the wikipedia example using the view
defined with Sirius.

.Example of a Marked Graph model (from link:http://en.wikipedia.org/wiki/Marked_graph[wikipedia])
image::images/MarkedGraph/MG-model-wikipedia.png[Example of a Marked Graph model (from wikipedia)]

== Set up an xDSML project

In this section, we first create an xDSML project for MarkedGraph
and initialize it with the provided Abstract Syntax (AS) and Concrete
Syntax (CS).

=== Create an xDSML Project

Select an xDSML project (__New > Project > GEMOC
Project / new xDSML Project__).

.Create an xDSML Project
image::images/MarkedGraph/MG-SelectGemocLanguageProject.png[Create an xDSML Project]

The first dialog of the wizard asks for the name of the project. Define
it as __org.gemoc.sample.markedgraph.xdsml__.


.Define the name of the project
image::images/MarkedGraph/MG-SelectGemocLanguageProject-ProjectName.png[Define the name of the project]

Click on __Next__  and define the name of the language (__markedgraph__).

.Define the name of the language
image::images/MarkedGraph/MG-SelectGemocLanguageProject-LanguageName.png[Define the name of the language] 

=== Open xDSML View 

A file __project.xml__ has been created in the
__org.gemoc.sample.markedgraph.xdsml__ project.

.Content of the xDSML Project
image::images/MarkedGraph/MG-XDSML-content.png[Content of the xDSML Project]

When opened, it provides the xDSML view which summarizes all the
important resources used in an xDSML project (which are part of and
managed by other projects).  This view is a kind of control center to
have quick access to the main resources of the project.

.The xDSML Editor
image::images/MarkedGraph/MG-XDSML-start.png[The xDSML Editor]


=== Select the AS

In the "Domain Model" section, click on the "Browse" button to select
the project defining the AS: org.gemoc.sample.markedgraph.model.

.Browse to select the AS project
image::images/MarkedGraph/MG-XDSML-EMF-browse.png[Browse to select the AS project]

Then, select the "Genmodel URI".

.Browse to select the genmodel resource
image::images/MarkedGraph/MG-XDSML-EMF-genmodel-browse.png[Browse to select the genmodel resource]

Finally, select the "Root container model
element" thanks to the "Select" buttons.

.Browse to select the root container
image::images/MarkedGraph/MG-XDSML-EMF-root-browse.png[Browse to select the root container]

////

.The xDSML Editor with AS related fields initialized
image::images/MarkedGraph/MG-XDSML-EMF-done.png[The xDSML Editor with AS related fields initialized]

////

=== Select the Graphical Editor

The Graphical Editor defines a graphical concrete syntax which is
user-friendly to view and edit a model.

In the "Concrete syntax definition / Graphical editor" of the
project.xdsml editor, click on "Browse" to select the
"org.gemoc.markedgraph.design" project.

.Select Sirius graphical editor
image::images/MarkedGraph/MG-XDSML-CS-select.png[Select Sirius graphical editor]



== Define the Execution Semantics

// === Execution Semantics Overview

// XXX: à déplacer dans MoCC ou DSE ?

A transition can be fired if there is at least one token in every of
each input place.  When fired, one token is removed from each of its
input places and one token is added to each of its output places.
Several transitions can be fired as the same time.

Defining the execution semantics consists in implementing the previous
behavior.  In the GEMOC approach, it is split in different concerns:

* The definition of Execution Data (ED) like the runtime count of
tokens in a place and Execution Functions (EF) like fire a transition.
ED and EF constitute **the DSA**.

* The definition of the model of concurrency as a set of events and
constraints on these events.  It is **the MoCC** concern that is
defined in a DSE project (using ECL, Event Constraint Language)
possibly completed with MoCCML projects  to define libraries of
constraints.

* The **mapping** between the DSA and the MoCC.

In the current version of the GEMOC studio, the MoCC and the mapping
are tightly coupled and described in ECL (Event Constraint Language).



=== Define DSA

During execution of a MarkedGraph, the number of tokens of a place has
to be recorded and changed according to the fired transitions.  Thus,
we have to manage an execution data (ED) called runtimeTokenCount and
an execution function (EF) on Transition called fire().  Furthermore,
the runtimeTokenCount of each place must be initialized at the start
of the execution. It is the purpose of the EF called initialize() on
the MarkedGraph element.

The DSA of Marked Graph is composed of :

* one ED called  __runtimeTokenCount__
defined on __Place__ . It represents the number of token in a place when the
model is executed.
* one EF called initialize() defined
on __MarkedGraph__. It initializes the runtime token count of each
place with the initial token count.
* one ED called __fire()__ on
__Transition__. It to remove one token from each of its input places
and add one token to all its output places.


==== Extend the AS with ED and EF

At the moment, we need to complete the AS (markedgraph.ecore) with the
ED and EF.  In the next release of the GEMOC Studio this steps will
disappear and extended the AS will be done automatically thanks to
link:http://melange-lang.org/[Melange]

Add the 'runtimeTokenCount' ED on Place, 'fire()' on Transition and
'initialize()' on MarkedGraph.

.Abstract Syntax of MarkedGraph extended with Execution Data (ED) and Execution Functions (EF)
image::images/MarkedGraph/MarkedGraph-AS-DSA.png[Abstract Syntax of MarkedGraph extended with Execution Data (ED) and Execution Functions (EF)]

==== Create the DSA Project

Click on __K3 project__ in the project.xdml editor (Behavioral definition / DSA
definition).  The wizard to create of new Kermeta 3 project is
launched with the name of the project initialized (k3dsa is the last
name). Click "Finish".  The project has been created.

.Create a K3 Project
image::images/MarkedGraph/MG-K3-Create.png[Create a K3 Project]

==== Implement the DSA

Click again on _K3 project_ to open __markedgraph.xtend__.  It
has been initialized with a template that can be discarded and
replaced with the following text.

[source]
----
include::MarkedGraph/markedgraph.xtend[DSA defined using K3]
----


.Definition of the DSA (ED and EF)
image::images/MarkedGraph/MG-K3-Defined.png[Definition of the DSA (ED and EF)]

////
==== Create the Extented Model with Melange

Note: This step should become transparent in a next version of the
GEMOC Stutio.

XXX: What is the status of Melange.  How it works?

////


=== Define DSE

The purpose of the DSE project is to define events (called DSE) on AS
elements that will trigger EF calls when they occurs.  Furthermore,
constraints can be defined on these events to ensure they occur in the
right order.
// XXX: wording must be improved?



==== Create the DSE Project

To create the DSE Project, click on the "ECL Project" in the
__project.xdsml__ editor ("Behavior definition / DSE definition").
// TODO: on the next screen, the Ecore resource must be initialized.
Check that the name is __org.gemoc.sample.markedgraph.dse__.

.Create a DSE Project
image::images/MarkedGraph/MG-DSE-Create.png[Create a DSE Project]

Click "finish" and the project is created.

Click on "ECL Project" to edit the "markedgraph.ecl" file and replace
its content with the following:

.Template of the ECL file
image::images/MarkedGraph/MG-DSE-Template.png[Template of the ECL file]


==== Define DSE

This step has three main purposes:

* First, it specifies DSE in the context of metaclasses of the AS.
* Then, it links them to EF form DSA --- when a DSE will occurs the
associated EF will be executed.
* Finally, it defines constraints on the DSE to rule the possible
scheduling.  Constraints generally rely on relations which are defined
in the MoCC.

////
TODO: To be added as a next tutorial.
WARNING: Errors are present because the used Relations are not yet
defined...  They will be solved during the next step of this tutorial.
////


NOTE: Please notice that, as often, DSE are defined at the language
level, but at runtime they are instantiated as MSE on each object
instance of the metaclasse they are defined on.  In the same way,
constraints apply to the MSE.

Replace the content of the ECL file with the following code:

[source]
.The file markedgraph.ecl
----
include::MarkedGraph/markedgraph.ecl[Definition of the MoCC]
----


.Definition of the DSE (events and constraints)
image::images/MarkedGraph/MG-DSE-Defined.png[Definition of the DSE (events and constraints)]


////
TODO: Separate the MoCC part.  We could define several relations :
onlyOnce, beforeAll, and delayedPrecede.

TODO: Say that the Precede relation is defined in kernel.ccslLib or
CCSL.ccslLib.
////


TODO: Give some rationals on the relation and their instancitions. In
particular the delay.

What should be explained?

- The main principles (we can fire as much transition has the initial
token count of a place, thus a delayed is introduce)
- We want to ensure that one init is done before any fire (and only
once)


////
TODO:
Provide a pointer to a MoCCML version which uses constraint automata
to define the MoCC.
////


////
=== Define MoCC

The 



Give the implementation of the relations used in the DSE.

MoCCLib... To be done...

TODO: How to explain the defined relation?

TODO: Add a link to another tutorial which uses an automata to define
the MoCC.

Tricks: Limitation of ECL for Integer type : use of a local
expression.

////


////

=== Define Animation Viewpoint

One wants to know the number of tokens in any place during the
execution.  For example, it can be shown as a number inside the circle
representing a place and the size of the circle can be proportional to
the number of tokens it contains.

% XXX: Fireable transitions may be drawn in green.  


As the animation view is close to the graphical concrete syntax, we
extend the existing diagram description.

==== Extend the existing diagram description

TODO: Explain...

XXX: In Which eclipse?

TODO: The aird has to be provided!

Add a link to a tutorial for Sirius Animator.

////


== Animate a Model

The executable MarkedGraph Language is now defined.  We can use the
GEMOC Modeling Workbench to execute MarkedGraph models.

=== Launch the Modelling WorkBench

Launch the Modeling Workbench by running a new Eclipse:  right
click, select "run as / Eclipse Application".  The new eclipse is the
Modeling Workbench.

=== Import the project with a sample model

Import the modeling project markedgraph.sample in the
Modeling Workbench (Import / General / Existing project into
Workspace).

=== Create a Launch Configuration

Create a Run Configuration: right click on the model and select "Run
As... > Run Configurations". Create a new "Gemoc eXecutable Model"
configuration.  We can call it "gemoc" and fill in the fields:
Model to execute: "first.automata", xDSML: "markedgraph".

Change the "Decider" to "Step by step user decider" (the user will
decide which is the next step to execute).

=== Start the model

We can now run the "gemoc" configuration.  The graphical
representation is opened, the VCD is created, etc.

TODO: Give some explanations.


=== Select a logical step

From the timeline view, select the step to execute.

TODO: To complete...


////
=== What else?

Any idea?

////
