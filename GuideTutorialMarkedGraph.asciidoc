ifeval::[{docname}=='GuideTutoriaMarkedGraph']
:toc:
:toclevels: 4
:numbered:
:tabsize: 4
endif::[]



= Tutorial: Make Marked Graph models executable with the GEMOC Studio

// old title: Animate Marked Graph Models with the GEMOC Studio


== What is expected at the end of this tutorial

This tutorial aims at demonstrating the power of the GEMOC studio to
define an executable semantics and provide graphical animation for a
DSML.   It relies of the
http://en.wikipedia.org/wiki/Marked_graph[marked graph] language.

The link:images/MarkedGraph/MarkedGraph-wikipedia-anim-all.gif[following animation] shows the expecting results of this tutorial:
according to the fired transitions, tokens move from place to place.

.Expected animation for Marked Graph models
image::images/MarkedGraph/MarkedGraph-wikipedia-anim-all.gif[Expected animation for Marked Graph models] 


////
NOTE: A screencast of this tutorial can be found here (give URL when
it will be available)...
////


////
Please, read the link:GuideQuickTutorial.html[introduction of tutorials] to
understand the GEMOC approach to define executable DSML or to have a
better understanding of the abbreviations used in this tutorial.
////


== Install the projects defining the Marked Graph AS and CS

The domain model is implemented with several EMF projects that you
need to import into your workspace.
A graphical editor defined with Sirius is also available to visualize
and edit Marked Graph models.

////
TODO: If you are using the GEMOC Studio, you can find these projects
from the provided examples (menu File > New > Example... : select
Marked Graph DSML Definition). 
////

=== Import the Marked Graph AS and CS

Download the
link:MarkedGraph/org.gemoc.sample.markedgraph.zip[provided
archive] containing the projects and unzip it.  Then, with the GEMOC
Studio, select __import... / General / Existing Projects into
Workspace__ and import all the projects from the archive file.

link:MarkedGraph/org.gemoc.sample.markedgraph-final.zip[Here is the archive
containing all the projects] that will be created during this tutorial.


=== Abstract Syntax

Marked Graph is a kind of
http://en.wikipedia.org/wiki/Petri_net[Petri net]
in which every place has exactly one incoming arc and exactly one
outgoing arc.  As a consequence, it a concurrent language (several
transitions may be fired) and has no conflict.

The Domain Model, also called Abstract Syntax or Metamodel, defines :

- A __marked graph__ as a set of __places__ and __transitions__.
- Each __Place__ has exactly one __input__ transition and one __output__
transition and a token count.
- A transition has several __input__ places and several __output__
  places.

// [[MarkedGraph-AS]]
.Abstract Syntax (Metamodel) of MarkedGraph
image::images/MarkedGraph/MarkedGraph-AS.png[MarkedGraph Domain Model (Metamodel)]

=== Concrete Syntax and Sample Model

The graphical concrete syntax draws places as
circles and transitions as squares.  Inputs and outputs of places and
transitions are designated by arrows.  The following picture shows the
graphical representation of the
link:http://en.wikipedia.org/wiki/Marked_graph[Marked Graph model of wikipedia]
(using a graphical syntax defined using
link:http://www.eclipse.org/sirius/[Sirius]).

.Example of a Marked Graph model (from link:http://en.wikipedia.org/wiki/Marked_graph[wikipedia])
image::images/MarkedGraph/MG-model-wikipedia.png[Example of a Marked Graph model (from wikipedia)]

== Set up an xDSML project

In this section, we first create an xDSML project for MarkedGraph
and initialize it with the provided Abstract Syntax (AS) and Concrete
Syntax (CS).

=== Create an xDSML Project

Select an xDSML project (__New > Project > GEMOC
Project / new GEMOC Concurrent xDSML Project__).
////
You can also select __New ... / GEMOC Concurrent xDSML Project__.
////

.Create an xDSML Project
image::images/MarkedGraph/MG-SelectGemocLanguageProject.png[Create an xDSML Project, 800]

The first dialog of the wizard asks for the name of the project. Define
it as __org.gemoc.sample.markedgraph.xdsml__.


.Define the name of the project
image::images/MarkedGraph/MG-SelectGemocLanguageProject-ProjectName.png[Define the name of the project, 800]

Click on __Next__  and define the name of the language (__markedgraph__).

.Define the name of the language
image::images/MarkedGraph/MG-SelectGemocLanguageProject-LanguageName.png[Define the name of the language, 800] 

=== Open xDSML View 

A file __project.xml__ has been created in the
__org.gemoc.sample.markedgraph.xdsml__ project.

.Content of the xDSML Project
image::images/MarkedGraph/MG-XDSML-content.png[Content of the xDSML Project, 800]

When opened, it provides the xDSML view which summarizes all the
important resources used in an xDSML project (which are part of and
managed by other projects).  This view is a kind of control center to
have quick access to the main resources of the project.

.The xDSML Editor
image::images/MarkedGraph/MG-XDSML-start.png[The xDSML Editor, 800]


=== Select the AS

In the "Domain Model" section, click on the "Browse" button to select
the project defining the AS: org.gemoc.sample.markedgraph.model.

.Browse to select the AS project
image::images/MarkedGraph/MG-XDSML-EMF-Browse.png[Browse to select the AS project, 800]

Then, select the "Genmodel URI".

.Browse to select the genmodel resource
image::images/MarkedGraph/MG-XDSML-EMF-genmodel-browse.png[Browse to select the genmodel resource, 800]

Finally, select the "Root container model
element" thanks to the "Select" buttons.

.Browse to select the root container
image::images/MarkedGraph/MG-XDSML-EMF-root-browse.png[Browse to select the root container, 800]

////

.The xDSML Editor with AS related fields initialized
image::images/MarkedGraph/MG-XDSML-EMF-done.png[The xDSML Editor with AS related fields initialized]

////

=== Select the Graphical Editor

The Graphical Editor defines a graphical concrete syntax which is
user-friendly to view and edit a model.

In the "Concrete syntax definition / Graphical editor" of the
project.xdsml editor, click on "Browse" to select the
"org.gemoc.markedgraph.design" project.

.Select Sirius graphical editor
image::images/MarkedGraph/MG-XDSML-CS-select.png[Select Sirius graphical editor, 800]



== Define the Execution Semantics

// === Execution Semantics Overview

// XXX: à déplacer dans MoCC ou DSE ?

A transition can be fired if there is at least one token in every of
each input place.  When a transition is fired, one token is removed from each
of its input places and one token is added to each of its output places.
Several transitions can be fired as the same time.

Defining the execution semantics consists in implementing the previous
behavior.  In the GEMOC approach, it is split in different concerns:

* The definition of Execution Data (ED) like the runtime count of
tokens in a place and Execution Functions (EF) like fire a transition.
ED and EF constitute **the DSA**.

* The definition of the model of concurrency as a set of events and
constraints on these events.  It is **the MoCC** concern that is
defined in a DSE project (using ECL, Event Constraint Language)
possibly completed with MoCCML projects  to define libraries of
constraints.

* The **mapping** between the DSA and the MoCC.

In the current version of the GEMOC studio, the MoCC and the mapping
are tightly coupled and described in ECL (Event Constraint Language).



=== Define DSA

During execution of a MarkedGraph, the number of tokens of a place has
to be recorded and changed according to the fired transitions.  Thus,
we have to manage an execution data (ED) called runtimeTokenCount and
an execution function (EF) on Transition called fire().  Furthermore,
the runtimeTokenCount of each place must be initialized at the start
of the execution. It is the purpose of the EF called initialize() on
the MarkedGraph element.

The DSA of Marked Graph is composed of :

* one ED called  __runtimeTokenCount__
defined on __Place__ . It represents the number of token in a place when the
model is executed.
* one EF called initialize() defined
on __MarkedGraph__. It initializes the runtime token count of each
place with the initial token count.
* one ED called __fire()__ on
__Transition__. It to remove one token from each of its input places
and add one token to all its output places.


==== Extend the AS with ED and EF

At the moment, we need to complete the AS (markedgraph.ecore) with the
ED and EF.  In the next release of the GEMOC Studio this step replaced by the
use of link:http://melange-lang.org/[Melange] to automatically extend the AS
with ED and EF.

The ED and and EF are already defined on the provided metamodel.  Thus, there
is no need to add the 'runtimeTokenCount' ED on Place, 'fire()' on Transition
and 'initialize()' on MarkedGraph.

.Abstract Syntax of MarkedGraph extended with Execution Data (ED) and Execution Functions (EF)
image::images/MarkedGraph/MarkedGraph-AS-DSA.png[Abstract Syntax of MarkedGraph extended with Execution Data (ED) and Execution Functions (EF)]

==== Create the DSA Project

Click on __K3 project__ in the project.xdml editor (Behavioral definition / DSA
definition).  The wizard to create of new Kermeta 3 project is
launched with the name of the project initialized (k3dsa is the last
name). Click "Finish".  The project has been created.

.Create a K3 Project
image::images/MarkedGraph/MG-K3-Create.png[Create a K3 Project, 800]

==== Implement the DSA

Click again on _K3 project_ to open __markedgraph.xtend__.  It
has been initialized with a template that can be discarded and
replaced with the link:MarkedGraph/markedgraph.xtend[following text].

[source]
----
include::MarkedGraph/markedgraph.xtend[DSA defined using K3]
----


.Definition of the DSA (ED and EF)
image::images/MarkedGraph/MG-K3-Defined.png[Definition of the DSA (ED and EF), 800]

////
TODO: Qui des helper (initialize sur Place) : il faudrait indiquer
explicitiement qu'il ne faut pas la mettre sur le MM. Qu'elle ne peut être
appelée que depuis une autre EF. La mettre en privée dans xtend ?
////

////
==== Create the Extented Model with Melange

Note: This step should become transparent in a next version of the
GEMOC Stutio.

XXX: What is the status of Melange.  How it works?

////


=== Define DSE

The purpose of the DSE project is to define events (called DSE) on AS
elements that will trigger EF calls when they occurs.  Furthermore,
constraints can be defined on these events to define when they may occur.
// XXX: wording must be improved?




==== Create the DSE Project

* Click on the "ECL Project" in the
__project.xdsml__ editor ("Behavior definition / DSE definition").
// TODO: on the next screen, the Ecore resource must be initialized.
* Check that the name is __org.gemoc.sample.markedgraph.dse__.

.Create a DSE Project
image::images/MarkedGraph/MG-DSE-Create.png[Create a DSE Project, 800]

* Click "Next".  All fields have been correctly initialized.
* Click "finish" and the project is created.
* Click on "ECL Project" to view the "markedgraph.ecl".

.Template of the ECL file
image::images/MarkedGraph/MG-DSE-Template.png[Template of the ECL file, 800]


==== Define DSE

Replace the content of the ECL file with the
link:MarkedGraph/markedgraph.ecl[following code] (explanations on
this code are given bellow):

[source]
.The file markedgraph.ecl
----
include::MarkedGraph/markedgraph.ecl[Definition of the MoCC]
----


.Definition of the DSE (events and constraints)
image::images/MarkedGraph/MG-DSE-Defined.png[Definition of the DSE (events and constraints), 800]



This step has three main purposes:

1. First, it specifies DSE in the context of metaclasses of the AS.
For Marked Graph xDSML, we identify 2 DSE:

    - fireIt: defined in the context of a Transition
    - initIt: defined in the context of a MarkedGraph

2. Then, it links them to EF from DSA --- when a DSE will occur the
associated EF will be executed.

    - fireIt is linked to the EF 'fire' of Transition
    - initIt is linked to the EF 'initialize' of MarkedGraph

3. Finally, it defines constraints on the DSE to rule the possible
scheduling.  Constraints generally rely on relations which are defined
in MoCC libraries. Here constraints are expressed in CCSL and only relies
on relations and expression from the CCSL core library.

    - A first constraint applies on the fireIt events.  It is depends on
the number of token in a place.  Indeed, if there is no tokens, then
the fireIt of the output transition can only occur after the fireIt
event of the input transition has occured. It is expressed by the first
invariant defined in the context of a Place.
//
If there is some tokens in a place, then the fireIt event of the output
transition may occur as many times as there is tokens in this place.
After, it will only occur when the fireIt on the input transition of the
place has occured.  It is expressed using the DelayFor expression in the
second envariant of Place.

    - Two other constraints are defined in the context of the MarkedGraph
element.  The first one expresses that the first initIt event must occur
before any fireIt event.  The second one expresses that the initIt event
can occur only one time.

////
TODO: To be added as a next tutorial.
WARNING: Errors are present because the used Relations are not yet
defined...  They will be solved during the next step of this tutorial.
////


NOTE: Please notice that, as often, DSE are defined at the language
level, but at runtime they are instantiated as MSE on each object
instance of the metaclasse they are defined on.  For example, there will be
one fireIt MSE for each Transition element of MarkedGraph model.  For the
wikipedia example, there will a fireIt event for transitions t1, t2, t3 and
t4. In the same way, constraints apply to the MSE.


////
TODO: Separate the MoCC part.  We could define several relations :
onlyOnce, beforeAll, and delayedPrecede.

TODO: Say that the Precede relation is defined in kernel.ccslLib or
CCSL.ccslLib.
////



////
TODO:
Provide a pointer to a MoCCML version which uses constraint automata
to define the MoCC.
////


////
=== Define MoCC

The 



Give the implementation of the relations used in the DSE.

MoCCLib... To be done...

TODO: How to explain the defined relation?

TODO: Add a link to another tutorial which uses an automata to define
the MoCC.

Tricks: Limitation of ECL for Integer type : use of a local
expression.

////



== Define Animation Viewpoint


During the execution of a Marked Graph model, we want to visualize :

* the number of tokens in any place: the runtime token count will be printed in the circle of one place.
* the firable transitions: they will be drawn in green.

// and the size of the circle can be proportional to the number of tokens it
// contains.

As the animation view is close to the graphical concrete syntax, we
extend the existing diagram description.

First, we will define a graphical representation based on the graphical
Marked Graph syntax to the wizard called "Create GEMOC debug
representation", then we will add a layer to describe the graphical
animation of a Marked Graph model.

=== Create a debug representation (as an extension of the graphical editor viewpoint)

==== Run the wizard

Tun the wizard with __New > Other / Create GEMOC debug representation__.

.Create GEMOC debug representation wizard
image::images/MarkedGraph/MG-animation-wizard-launch.png[Create GEMOC debug representation wizard]

On the first screen of the wizad, select "Extends an existing diagram
description".

.Select "Extends an existing diagram description"
image::images/MarkedGraph/MG-animation-wizard-choose.png[Select "Extends an existing diagram description"]


Select the viewpoint to extend "MarkedGraph diagram".

.Select the viewpoint to extend
image::images/MarkedGraph/MG-animation-wizard-select-viewpoint.png[Select the viewpoint to extend]

Finally, we can fill in the Project Name in which the newly creating
viewpoint file will take place (org.gemoc.sample.markedgraph.animation),
the name of the viewpoint file (markedgraph-animation.odesign), the
viewpoint name (MarkedGraphViewpoint) and the diagram name (MarkedGraph).

.Information of the animation viewpoint
image::images/MarkedGraph/MG-animation-wizard-set-names.png[Information of the animation viewpoint]

The last screen allows to choose the name of the layer to be created. Debug
is a good name.

Once the __Finish__ button is pressed, the project is created.

==== Open the markedgraph-animation.odesign

Open the markedgraph-animation.odesign file and develop its content.


// TODO: explain its contents.


==== Load markedgraph.odesign as a resource.

// TODO: should be fixed?

To be able to complete the definition of the odesign file, we first need to
load the existing markedgraph.odesign as a resource :

* Right click in the markedgraph.odesign editor to select __Load Resource...__.
* Select __Browse workspace...__
* Select __markedgraph.odesign__ in the
__org.gemoc.sample.markedgraph.design__ project
* Click OK
* Click OK


==== Add markedgraph.ecore to the metamodels

* Select "Diagram Extension MarkedGraph" element.
* In the __Properties__ view, select __metamodels__.
* Click on "Add from workspace".
* Select "markedgraph.ecore" (unfold the project structure)
* Click OK


==== Complete the debug representation

On the "Mapping Based Decoration Enabled breakpoint" and "Mapping Based
Decoration Disabled breakpoint", select the "Place" and "Transition"
element.

The debug view will show a symbol on the Place and Transition to show
whether the corresponding breakpoint is enabled or disabled.

// TODO: Give a pointer to the file already completed!


==== Set the animation viewpoint in project.xml

In the xDSML editor, we can select the animation viewpoint by selecting the
newly created project (__org.gemoc.sample.markedgraph.animation__)


=== Create an animation representation

After the debug presentation has been defined, we can complete it to add an
animation layer.

==== Create the Animation Layer

* Right click on "Diagram extension MarkedGraph" to __select New Diagram
  Element / Additional Layer__.
* Set its "id" to "Animation".


==== Display the firable transition with a green background color

* Right click on "Animation" to select "New Customization / Style
Customizations".
* Right click on "Style Customizations" to select "New Customization /
Style Customization".
* On "Style Customization", set the "Predicate Expression" to:

    [self.eGet('inputs')->forAll(p | p.eGet('runtimeTokenCount').toString().toInteger() > 0) /]

* Right click on "Style Customization" to select "New Customization /
Property Customization (by selection)"
* For "Applied On" property, select "Square white".
* For "Property Name", set "color" (completion is available with CTRL-SPACE)
* For "Value Selction", set "light_green"

==== Set the background color of a place to light_yellow

Perform the same action as above to set the background color of places to
yellow.

// FIXEME: how to select the right (ellipse white)?

==== Display the runtime token count in a place


* Right click on "Style Customization" to select "New Customization /
Property Customization (by expression)"
* For "Applied On" property, select "Ellipse white".
* For "Property Name", set "labelExpression" (completion is available with CTRL-SPACE)
* For "Value Selction", set "feature:runtimeTokenCount"


==== Add the Animation service

* Right click on "MarkedGraphViewpoint" to select "New Extension / Java
Extension".
* Set "Qualified Class Name" to
"org.gemoc.sample.markedgraph.animation.services.MarkedgraphAnimationServices".

In the project, __org.gemoc.sample.markedgraph.animation__ project, in
src/org.gemoc.sample.markedgraph.animation.services, copy the
MarkedgraphDebugServices.java file to
MarkedgraphAnimationServices.java.  Then, change
AbstractGemocDebuggerServices to AbstractGemocAnimatorServices in its
source code (two times: import and extends).  Finally, change "Debug" to
"Animation".

// TODO: The aird has to be provided!

// XXX: Add a link to a tutorial for Sirius Animator.


== Animate a Model

The executable MarkedGraph Language is now defined.  We can use the
GEMOC Modeling Workbench to execute MarkedGraph models.

=== Launch the Modeling WorkBench

First, we will create a run configuration.  Select "run / run Configurations"
Double click on "Eclipse Application" and change the name "New
Configuration" into "Marked Graph Modeling Workbench".  We can now click
"Run" to start the new runtime Eclipse which indeed corresponds to the
Modeling Workbench for Marked Graph.

.Define the Marked Graph Modeling Workbench configuration
image::images/MarkedGraph/MG-run-EclipseApplicationConfig.png[Define the Marked Graph Modeling Workbench configuration]


=== Import the project with a sample model

Import the modeling project
link:MarkedGraph/org.gemoc.sample.markedgraph.sample.zip[org.gemoc.sample.markedgraph.sample]
in the Modeling Workbench (Import / General / Existing project into
Workspace).  It contains the wikipedia.markedgraph file which corresponds
to the link:http://en.wikipedia.org/wiki/Marked_graph[Wikipedia example].

=== Select the Modeling perspective

* Select "Window / Open Perspective / Others..."
* Select "Modeling" in the list.

=== Create a Launch Configuration

* Select __Debug / Debug Configurations__
* Double click on "Gemoc Concurrent eXecutable Model"
* Change the name of the new configuration to "run wikipedia example"
* Browse to select the model to run (wikipedia.markedgraph)
* Select its language (xDSML field): markedgraph
* Browse to select the animator
* Check that the "Decider" is set to "Step by step user decider" (the user
  will decide which well be the next step to execute).
* Click on "Debug"

.Define the configuration to run the wikipedia example
image::images/MarkedGraph/MG-run-WikipediaConfig.png[Define the configuration to run the wikipedia example]


=== Launch the execution of the model

We can now run the "gemoc" configuration.  It opens the different views related to the execution on an xDSML model:

* Logical Steps (top left): the list of the logical steps that may be
  selected at this execution step.
* Gemoc Engine Status (middle left): the list on the running GEMOC engines.
The red button stops the selected engine.
* Stimuli Manager (bottom left): the list of MSE.
* VCD (top right): a graphical visualisation of the events manages by the
MoCC (first ones correspond to the MSE).
* Graphical visualization (middle right) of the model (with animation
information)
* Time Line (bottom middle): the logical steps available at each steps and
the selected one.
* Console: several consoles are available.  The dispolayed one is the
"Default MessaginSystem Console". There is one console the the main
component of the Modeling Workbench.


.The wikipedia model is just started
image::images/MarkedGraph/MG-run-start.png[The wikipedia model is just started]


=== Select a logical step

The Logical Steps view, presents the possible steps, and for each step,
the MSE that will occur if it is selected.

.One logical step selected
image::images/MarkedGraph/MG-run-start-select.png[One logical step selected]

Double-click on a Logical Step to choose it.  The corresponding MSE
occur, they are visible on the VCD, and they trigger the associated
execution functions which make the state of the model evolve.

.Execute a logical step
image::images/MarkedGraph/MG-run-init.png[Execute a logical step]


Then, we can select a new logical step (here we selected the the logical step which fires the t2 transition).

.Transition t1 fired
image::images/MarkedGraph/MG-run-t1-fired.png[Transition t1 fired]

.Transition t2 fired
image::images/MarkedGraph/MG-run-t2-fired.png[Transition t2 fired]

.Some logical steps later
image::images/MarkedGraph/MG-run-last.png[Some logical steps later]


=== Stop the execution

To stop the execution:

* Select the "Gemoc Engine Status" view
* Select the engine to stop
* Click on the red button to actually stop the engine (the left icon
becomes red)


== Going further...

To improve readability of the ECL file and also to favor capitalization and
reuse of MoCC elements, it is possible (and encouraged) to define libraries.
Those libraries looks like the predefined ones that we have already used like
kernel.lib and CCSL.lib.

=== Define a MoCCML library using CCSL

Using the GEMOC Studio, we start by defining a MoCCML project.  In the xDSML
view, we select __Behavioral definition / MoCC definition library__ to create
this new project.

We can then define in this project the following link:MarkedGraph/markedgraph.ccslLib[markedgraph.ccslLib] file. TODO: To be corrected.

[source]
.The file markedgraph.ccslLib defining a MoCCML library
----
include::MarkedGraph/markedgraph.ccslLib[Definition of a MoCCML library]
----


=== Using it in the ECL file

To use this new library, we only have to import it at the beginning of
the ECL file and the we can use it as kernel.lib and CCSL.lib
libraries.

Here is the new ECL file.

[source]
.The file markedgraph.ecl using the MoCCML library
----
include::MarkedGraph/markedgraph-library.ecl[Definition of the MoCC using a MoCCML library]
----





== Use constraint automata to define the MoCC


Sometimes, it may be easier to define the MoCC using automata.  For
example, we can see a place as something on which we can read a token
(ont output transition reads one token) or we can write a token (one
input transition writes one token).  A token can only be read if there
is at least one in the place.  Initially, there is as much token in
the place as in the initial token count of the place.

=== Define the constraint automaton using MoCCML editor

For explanations on how to use the MoCCML editor, please refer to the GEMOC
manual.
// TODO: provide the URL to it.

We first define the declaration of a relation (placeReadWrite).  Here after
is its graphical representation.  This relation is parameterized by the r clock (some one how wants to read a token), the w clock (someone how wants to write a token, and n the initial count of token in the place).

.Graphical declaration of the placeReadWriteDef relation
image::images/MarkedGraph/MoCCML-diagram.png[Graphical definition of a relation]

Then we can define this relation. Here after is the resulting automaton. The
local variable count represent the number of tokens in this place.  s0 is the
initial state. The action on the transition from s0 to s initialize count with
n (the parameter).  The two reflexive transitions on s explain what happens
when w or r occurs.  The write transition is fired when w occurs and  a token is assed in the place (count is incremented). The read transition is fired when r occurs.  It removes a token and thus decrements count. 
A guard prevents the read transition to be fired if there is not at liste one token in the place (count >= one).

.Automaton defining the placeReadWriteDef relation.
image::images/MarkedGraph/MoCCML-automata.png[Automaton defining the placeReadWriteDef relation]



Here is the textual representation of this constraint automata.

[source]
.Textual representation of the constraint automata.
----
include::MarkedGraph/markedgraph.moccml[Textual representation of the constraint automata]
----




////
== To go further...

////



////
=== What else?

Any idea?

////
