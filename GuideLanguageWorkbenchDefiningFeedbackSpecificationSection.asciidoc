=== Defining the Feedback Specification

==== Purpose
In the GEMOC approach, the MoCC is independent from the domain. However, most languages need to be able to parameterize their control flow with their data flow. For instance, a conditional statement is a control flow construct which is conditioned by the result of its condition. Therefore, a form of communication between the MoCC and the DSA must be operated.
In this context, the Feedback Specification specifies how domain data returned by an Execution Function must be interpreted to parameterize the MoCC. The Feedback Specification consists in a set of Feedback Policies which are associated to the Domain-Specific Events. Therefore, the Feedback Specification is also done using ((GEL)).

==== Creating a Feedback Policy
A Feedback Policy can be associated to a DSE using the following syntax:
----
import "platform:/resource/org.gemoc.sample.fuml.model/model/fuml.ecore"
import "platform:/resource/org.gemoc.sample.fuml.mocc/ECL/fuml.ecl"

DSE <name>:
  upon <MoccEvent>
  triggers <Path-to-ExecutionFunction> returning <resultName>
  feedback:
    [<filter1>] => allow <PathToMoccEventConsequence1>
    [<filter2>] => allow <PathToMoccEventConsequence2>
    ...
    default => allow <PathToMoccEventDefaultConsequence>
  end
end
----
Where:

* <resultName> is a local variable which will be affected with the value returned by the associated Execution Function;

* Between the _feedback_ and _end_ keywords, a set of Feedback Rules are defined (including a default Feedback Rule, with the _default_ keyword). A Feedback Rule is composed of a filter and a consequence;

* <filterN> are predicates, most likely using <resultName> which define whether or not this Feedback Rule must be applied;

* <PathToMoccEventConsequenceN> is a navigation path to a MoccEvent which specifies which MoccEvent is allowed as a result of the data returned by the Execution Function.

==== Semantics of the Feedback Policy
When the Execution Function associated to a DSE returns a result, it is passed through each filter of the Feedback Policy. If none of the filters is validated, then the default rule is applied. Else, the collection of rules for which the filter validated are applied. 
For each rule to apply, the associated consequence is allowed to have occurrences in upcoming steps of execution.

==== Example
----
DSE EvaluateGuard:
	upon mocc_evaluateGuard
	triggers ActivityEdge.evaluateGuard returning result
	feedback:
		[ result ] => allow ActivityEdge.mocc_mayExecuteTarget
		default => allow ActivityEdge.mocc_mayNotExecuteTarget
	end
end
----
